# .github/workflows/release.yml

name: Create GitHub Release (Simplified)

on:
  push:
    branches:
      - master # Trigger on pushes to the 'master' branch
  workflow_dispatch: # This line allows you to manually trigger the workflow from the GitHub UI

jobs:
  release-specific-file:
    runs-on: ubuntu-latest # Use a Linux runner
    permissions:
      # Grant write permission to the GITHUB_TOKEN for contents (required for releases)
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # Action to check out your code

      # Dynamically get all .app files from the /examples/ folder (no subfolders)
      - name: Discover .app files in examples directory
        id: discover_app_files
        run: |
          # Use 'find' to get all .app files directly in 'examples/'
          # -maxdepth 1 ensures no subfolders are included
          # -name "*.app" filters for .app files
          # -printf "%f\n" prints only the filename (e.g., "flow_editor_packaged.app")
          APP_FILES=$(find examples/ -maxdepth 1 -name "*.app" -printf "%f\n" | tr '\n' ' ')
          echo "Discovered APP_FILES: $APP_FILES"
          echo "APP_FILES=$APP_FILES" >> $GITHUB_OUTPUT

      - name: List root directory contents (Diagnostic)
        run: |
          echo "Contents of the repository root directory:"
          ls -la .
          echo "--- End of root directory contents ---"

      - name: List files in examples directory (Diagnostic)
        run: |
          echo "Contents of the 'examples' directory:"
          find examples/ -maxdepth 1 -print -ls
          echo "--- End of 'examples' directory contents ---"

      - name: Copy .app files and rename for release upload (Workaround for .app extension issue)
        run: |
          # Loop through the dynamically discovered APP_FILES and copy/rename each one
          # Check if APP_FILES is empty to avoid errors
          if [ -z "${{ steps.discover_app_files.outputs.APP_FILES }}" ]; then
            echo "No .app files found in 'examples/' to package. Exiting."
            exit 1
          fi

          for app_file in ${{ steps.discover_app_files.outputs.APP_FILES }}; do
            source_path="examples/$app_file"
            dest_name="${app_file%.app}.bin" # Rename .app to .bin
            dest_path="$dest_name"

            if [ -f "$source_path" ]; then
              cp "$source_path" "$dest_path"
              echo "Copied $source_path to $dest_path for upload."
              ls -la "$dest_path" # Verify copy and new name
            else
              # This case should ideally not happen if 'find' worked correctly,
              # but it's a good safeguard.
              echo "‚ùå Error: File '$source_path' was listed but not found during copy. Skipping."
              exit 1 # Exit if a specified file is not found
            fi
          done

      # New step to generate the dynamic part of the release body AND the list of files for upload
      - name: Generate Release Body Content and Upload File List
        id: generate_content_lists
        run: |
          FILES_LIST=""
          UPLOAD_FILES=""
          for app_file in ${{ steps.discover_app_files.outputs.APP_FILES }}; do
              FILES_LIST+="- $app_file (Original Path: /examples/$app_file)\n"
              FILES_LIST+="  **Important:** The attached file is named ${app_file%.app}.bin. Please rename it to $app_file after downloading for proper use.\n"
              UPLOAD_FILES+="${app_file%.app}.bin\n" # Add to the list for upload
          done
          # Escape newlines for multi-line output for the body
          echo "FILES_LIST<<EOF" >> $GITHUB_OUTPUT
          echo -e "$FILES_LIST" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          # Output the list of files to upload, newline-separated
          echo "UPLOAD_FILES<<EOF" >> $GITHUB_OUTPUT
          echo -e "$UPLOAD_FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT


      - name: Create GitHub Release and Upload Specific Assets
        id: create_release
        uses: softprops/action-gh-release@v2 # Action to create a GitHub Release
        with:
          name: Release ${{ github.run_number }}
          tag_name: release-${{ github.run_number }}
          body: |
            ## Automated Release #${{ github.run_number }}

            This release includes the following packaged application files:
            Triggered by a push to the `master` branch.

            ### Files Included:
            ${{ steps.generate_content_lists.outputs.FILES_LIST }} # Reference the output from the new step
          draft: false
          prerelease: false
          # Now pointing to all the renamed .bin files in the root directory for upload
          files: |
            ${{ steps.generate_content_lists.outputs.UPLOAD_FILES }} # Use the new output for files
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
