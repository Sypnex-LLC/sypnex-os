{
  "app_metadata": {
    "id": "app_store",
    "name": "App Store",
    "description": "Simple app store to browse and install available user applications",
    "icon": "fas fa-store",
    "keywords": [
      "store",
      "apps",
      "install",
      "download",
      "browse"
    ],
    "author": "Sypnex OS",
    "version": "1.0.0",
    "type": "user_app",
    "scripts": [
      "main.js"
    ],
    "styles": [
      "style.css"
    ]
  },
  "files": {
    "app_store.app": "ew0KICAiaWQiOiAiYXBwX3N0b3JlIiwNCiAgIm5hbWUiOiAiQXBwIFN0b3JlIiwNCiAgImRlc2NyaXB0aW9uIjogIlNpbXBsZSBhcHAgc3RvcmUgdG8gYnJvd3NlIGFuZCBpbnN0YWxsIGF2YWlsYWJsZSB1c2VyIGFwcGxpY2F0aW9ucyIsDQogICJpY29uIjogImZhcyBmYS1zdG9yZSIsDQogICJrZXl3b3JkcyI6IFsic3RvcmUiLCAiYXBwcyIsICJpbnN0YWxsIiwgImRvd25sb2FkIiwgImJyb3dzZSJdLA0KICAiYXV0aG9yIjogIlN5cG5leCBPUyIsDQogICJ2ZXJzaW9uIjogIjEuMC4wIiwNCiAgInR5cGUiOiAidXNlcl9hcHAiLA0KICAic2NyaXB0cyI6IFsibWFpbi5qcyJdLA0KICAic3R5bGVzIjogWyJzdHlsZS5jc3MiXQ0KfQ0K",
    "app_store.html": ""
  },
  "package_info": {
    "format_version": "1.0",
    "created_at": "2025-07-19T23:58:10.895575",
    "packaged_by": "Sypnex OS App Packager",
    "source_directory": "user_apps_dev\\app_store"
  }
}