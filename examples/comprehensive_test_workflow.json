{
  "nodes": [
    {
      "id": "start_timer",
      "type": "timer",
      "x": 100,
      "y": 100,
      "config": {
        "interval": {
          "type": "number",
          "label": "Interval (ms)",
          "value": 1000,
          "min": 100,
          "max": 300000,
          "step": 100
        },
        "count": {
          "type": "number",
          "label": "Count (0 = infinite)",
          "value": 1,
          "min": 0,
          "step": 1
        }
      }
    },
    {
      "id": "repeater_node",
      "type": "repeater",
      "x": 100,
      "y": 300,
      "config": {
        "interval": {
          "type": "number",
          "label": "Interval (ms)",
          "value": 2000,
          "min": 100,
          "max": 300000,
          "step": 100
        },
        "count": {
          "type": "number",
          "label": "Count (0 = infinite)",
          "value": 3,
          "min": 0,
          "step": 1
        }
      }
    },
    {
      "id": "http_get_test",
      "type": "http",
      "x": 400,
      "y": 100,
      "config": {
        "url": {
          "type": "text",
          "label": "URL",
          "value": "https://httpbin.org/json"
        },
        "method": {
          "type": "select",
          "label": "Method",
          "value": "GET",
          "options": ["GET", "POST", "PUT", "DELETE"]
        },
        "headers": {
          "type": "textarea",
          "label": "Headers (JSON)",
          "value": "{\"Content-Type\": \"application/json\"}"
        },
        "body": {
          "type": "textarea",
          "label": "Body (JSON)",
          "value": ""
        },
        "use_template": {
          "type": "select",
          "label": "Use Template Data",
          "value": "false",
          "options": ["true", "false"]
        }
      }
    },
    {
      "id": "http_post_test",
      "type": "http",
      "x": 400,
      "y": 300,
      "config": {
        "url": {
          "type": "text",
          "label": "URL",
          "value": "https://httpbin.org/post"
        },
        "method": {
          "type": "select",
          "label": "Method",
          "value": "POST",
          "options": ["GET", "POST", "PUT", "DELETE"]
        },
        "headers": {
          "type": "textarea",
          "label": "Headers (JSON)",
          "value": "{\"Content-Type\": \"application/json\"}"
        },
        "body": {
          "type": "textarea",
          "label": "Body (JSON)",
          "value": "{\"test\": \"data\", \"number\": 42}"
        },
        "use_template": {
          "type": "select",
          "label": "Use Template Data",
          "value": "false",
          "options": ["true", "false"]
        }
      }
    },
    {
      "id": "text_node_test",
      "type": "text",
      "x": 700,
      "y": 100,
      "config": {
        "text_content": {
          "type": "textarea",
          "label": "Text Content",
          "value": "Hello from text node!"
        }
      }
    },
    {
      "id": "json_extract_test",
      "type": "json_extract",
      "x": 700,
      "y": 300,
      "config": {
        "field_path": {
          "type": "text",
          "label": "Field Path",
          "value": "slideshow.slides[0].title",
          "placeholder": "Use dot notation (e.g., data.items.0.name)"
        },
        "display_format": {
          "type": "select",
          "label": "Display Format",
          "value": "text",
          "options": ["text", "json"]
        }
      }
    },
    {
      "id": "condition_test",
      "type": "condition",
      "x": 1000,
      "y": 100,
      "config": {
        "operator": {
          "type": "select",
          "label": "Operator",
          "value": "contains",
          "options": [
            "equals", "not_equals", "greater_than", "less_than",
            "greater_than_or_equal", "less_than_or_equal",
            "contains", "not_contains", "starts_with", "ends_with",
            "is_empty", "is_not_empty"
          ]
        },
        "compare_value": {
          "type": "text",
          "label": "Compare Value",
          "value": "Hello"
        },
        "case_sensitive": {
          "type": "select",
          "label": "Case Sensitive",
          "value": "false",
          "options": ["true", "false"]
        }
      }
    },
    {
      "id": "logical_gate_test",
      "type": "logical_gate",
      "x": 1000,
      "y": 300,
      "config": {
        "invert": {
          "type": "select",
          "label": "Invert",
          "value": "false",
          "options": ["true", "false"]
        },
        "description": {
          "type": "text",
          "label": "Description",
          "value": "Test logical gate"
        }
      }
    },
    {
      "id": "llm_chat_test",
      "type": "llm_chat",
      "x": 1300,
      "y": 100,
      "config": {
        "endpoint": {
          "type": "text",
          "label": "Endpoint",
          "value": "http://localhost:11434"
        },
        "model": {
          "type": "text",
          "label": "Model",
          "value": "llama2"
        },
        "temperature": {
          "type": "number",
          "label": "Temperature",
          "value": 0.7,
          "min": 0,
          "max": 2,
          "step": 0.1
        },
        "max_tokens": {
          "type": "number",
          "label": "Max Tokens",
          "value": 100,
          "min": 1,
          "max": 4096,
          "step": 1
        },
        "system_prompt": {
          "type": "textarea",
          "label": "System Prompt",
          "value": "You are a helpful assistant."
        }
      }
    },
    {
      "id": "vfs_save_test",
      "type": "vfs_save",
      "x": 1300,
      "y": 300,
      "config": {
        "file_path": {
          "type": "text",
          "label": "File Path",
          "value": "/test_output.json",
          "placeholder": "/absolute/path/in/vfs"
        },
        "format": {
          "type": "select",
          "label": "Format",
          "value": "json",
          "options": ["json", "text", "binary"]
        },
        "overwrite": {
          "type": "select",
          "label": "Overwrite",
          "value": "true",
          "options": ["true", "false"]
        },
        "append": {
          "type": "select",
          "label": "Append Mode",
          "value": "false",
          "options": ["true", "false"]
        }
      }
    },
    {
      "id": "vfs_load_test",
      "type": "vfs_load",
      "x": 1600,
      "y": 100,
      "config": {
        "file_path": {
          "type": "text",
          "label": "File Path",
          "value": "/test_output.json",
          "placeholder": "/absolute/path/in/vfs"
        },
        "format": {
          "type": "select",
          "label": "Format",
          "value": "json",
          "options": ["json", "text", "binary"]
        },
        "auto_reload": {
          "type": "select",
          "label": "Auto Reload on Change",
          "value": "false",
          "options": ["true", "false"]
        }
      }
    },
    {
      "id": "display_frontend_only",
      "type": "display",
      "x": 1600,
      "y": 300,
      "config": {
        "format": {
          "type": "select",
          "label": "Format",
          "value": "json",
          "options": ["text", "json", "html"]
        },
        "maxLength": {
          "type": "number",
          "label": "Max Length",
          "value": 1000,
          "min": 1,
          "max": 10000,
          "step": 100
        }
      }
    },
    {
      "id": "image_frontend_only",
      "type": "image",
      "x": 1900,
      "y": 100,
      "config": {
        "max_preview_size": {
          "type": "number",
          "label": "Max Preview Size (px)",
          "value": 150,
          "min": 50,
          "max": 300,
          "step": 10
        },
        "show_info": {
          "type": "select",
          "label": "Show Image Info",
          "value": "true",
          "options": ["true", "false"]
        }
      }
    },
    {
      "id": "audio_frontend_only",
      "type": "audio",
      "x": 1900,
      "y": 300,
      "config": {
        "autoPlay": {
          "type": "select",
          "label": "Auto Play",
          "value": "false",
          "options": ["true", "false"]
        },
        "volume": {
          "type": "number",
          "label": "Volume (0-1)",
          "value": 1,
          "min": 0,
          "max": 1,
          "step": 0.1
        }
      }
    }
  ],
  "connections": [
    {
      "id": "timer_to_http_get",
      "from": {
        "nodeId": "start_timer",
        "portName": "trigger"
      },
      "to": {
        "nodeId": "http_get_test",
        "portName": "trigger"
      }
    },
    {
      "id": "timer_to_http_post",
      "from": {
        "nodeId": "start_timer",
        "portName": "trigger"
      },
      "to": {
        "nodeId": "http_post_test",
        "portName": "trigger"
      }
    },
    {
      "id": "timer_to_text",
      "from": {
        "nodeId": "start_timer",
        "portName": "trigger"
      },
      "to": {
        "nodeId": "text_node_test",
        "portName": "trigger"
      }
    },
    {
      "id": "http_get_to_json_extract",
      "from": {
        "nodeId": "http_get_test",
        "portName": "parsed_json"
      },
      "to": {
        "nodeId": "json_extract_test",
        "portName": "json_data"
      }
    },
    {
      "id": "text_to_condition",
      "from": {
        "nodeId": "text_node_test",
        "portName": "text"
      },
      "to": {
        "nodeId": "condition_test",
        "portName": "value"
      }
    },
    {
      "id": "condition_to_logical_gate",
      "from": {
        "nodeId": "condition_test",
        "portName": "result"
      },
      "to": {
        "nodeId": "logical_gate_test",
        "portName": "condition"
      }
    },
    {
      "id": "logical_gate_to_llm",
      "from": {
        "nodeId": "logical_gate_test",
        "portName": "trigger"
      },
      "to": {
        "nodeId": "llm_chat_test",
        "portName": "trigger"
      }
    },
    {
      "id": "text_to_llm_prompt",
      "from": {
        "nodeId": "text_node_test",
        "portName": "text"
      },
      "to": {
        "nodeId": "llm_chat_test",
        "portName": "prompt"
      }
    },
    {
      "id": "llm_to_vfs_save",
      "from": {
        "nodeId": "llm_chat_test",
        "portName": "response"
      },
      "to": {
        "nodeId": "vfs_save_test",
        "portName": "data"
      }
    },
    {
      "id": "vfs_save_to_vfs_load",
      "from": {
        "nodeId": "vfs_save_test",
        "portName": "file_path"
      },
      "to": {
        "nodeId": "vfs_load_test",
        "portName": "trigger"
      }
    },
    {
      "id": "vfs_load_to_display",
      "from": {
        "nodeId": "vfs_load_test",
        "portName": "data"
      },
      "to": {
        "nodeId": "display_frontend_only",
        "portName": "text"
      }
    },
    {
      "id": "http_post_to_image",
      "from": {
        "nodeId": "http_post_test",
        "portName": "parsed_json"
      },
      "to": {
        "nodeId": "image_frontend_only",
        "portName": "image_data"
      }
    },
    {
      "id": "http_get_to_audio",
      "from": {
        "nodeId": "http_get_test",
        "portName": "parsed_json"
      },
      "to": {
        "nodeId": "audio_frontend_only",
        "portName": "audio_data"
      }
    }
  ],
  "tags": [
    {
      "id": "tag_timer",
      "name": "Timer/Repeater",
      "description": "Test timer and repeater nodes",
      "x": 100,
      "y": 50,
      "color": "#2196F3"
    },
    {
      "id": "tag_http",
      "name": "HTTP Tests",
      "description": "Test HTTP GET and POST",
      "x": 400,
      "y": 50,
      "color": "#4CAF50"
    },
    {
      "id": "tag_data_processing",
      "name": "Data Processing",
      "description": "Text, JSON extract, condition, logical gate",
      "x": 700,
      "y": 50,
      "color": "#FF9800"
    },
    {
      "id": "tag_ai",
      "name": "AI/LLM",
      "description": "LLM chat node test",
      "x": 1300,
      "y": 50,
      "color": "#9C27B0"
    },
    {
      "id": "tag_vfs",
      "name": "VFS Operations",
      "description": "Save and load operations",
      "x": 1600,
      "y": 50,
      "color": "#607D8B"
    },
    {
      "id": "tag_frontend_only",
      "name": "Frontend Only",
      "description": "Display, image, audio nodes",
      "x": 1900,
      "y": 50,
      "color": "#F44336"
    }
  ],
  "metadata": {
    "savedAt": "2025-01-15T00:00:00.000Z",
    "nodeCount": 14,
    "connectionCount": 13,
    "tagCount": 6,
    "description": "Comprehensive test workflow covering all node types"
  }
} 