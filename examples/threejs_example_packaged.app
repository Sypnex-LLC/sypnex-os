{
  "app_metadata": {
    "id": "threejs_example",
    "name": "Neural Network 3D",
    "description": "Interactive 3D neural network visualization with real-time animation",
    "icon": "fas fa-brain",
    "keywords": [
      "3d",
      "visualization",
      "neural",
      "network",
      "threejs",
      "animation"
    ],
    "author": "Sypnex OS",
    "version": "1.0.0",
    "type": "user_app",
    "scripts": [
      "test.js",
      "script.js"
    ]
  },
  "files": {
    "threejs_example.app": "ew0KICAgICJpZCI6ICJ0aHJlZWpzX2V4YW1wbGUiLA0KICAgICJuYW1lIjogIk5ldXJhbCBOZXR3b3JrIDNEIiwNCiAgICAiZGVzY3JpcHRpb24iOiAiSW50ZXJhY3RpdmUgM0QgbmV1cmFsIG5ldHdvcmsgdmlzdWFsaXphdGlvbiB3aXRoIHJlYWwtdGltZSBhbmltYXRpb24iLA0KICAgICJpY29uIjogImZhcyBmYS1icmFpbiIsDQogICAgImtleXdvcmRzIjogWyIzZCIsICJ2aXN1YWxpemF0aW9uIiwgIm5ldXJhbCIsICJuZXR3b3JrIiwgInRocmVlanMiLCAiYW5pbWF0aW9uIl0sDQogICAgImF1dGhvciI6ICJTeXBuZXggT1MiLA0KICAgICJ2ZXJzaW9uIjogIjEuMC4wIiwNCiAgICAidHlwZSI6ICJ1c2VyX2FwcCIsDQogICAgInNjcmlwdHMiOiBbDQogICAgICAgICJ0ZXN0LmpzIiwNCiAgICAgICAgInNjcmlwdC5qcyINCiAgICBdDQp9",
    "threejs_example.html": ""
  },
  "package_info": {
    "format_version": "1.0",
    "created_at": "2025-07-19T23:10:17.307047",
    "packaged_by": "Sypnex OS App Packager",
    "source_directory": "user_apps_dev\\threejs_example"
  }
}