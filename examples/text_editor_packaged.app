{
  "app_metadata": {
    "id": "text_editor",
    "name": "Text Editor",
    "description": "A simple text editor for creating and editing text files in the virtual file system",
    "icon": "fas fa-edit",
    "keywords": [
      "text",
      "editor",
      "file",
      "edit",
      "write"
    ],
    "author": "Sypnex OS",
    "version": "1.0.2",
    "type": "user_app",
    "scripts": [
      "js/utils.js",
      "js/settings-manager.js",
      "js/file-manager.js",
      "js/editor-manager.js",
      "js/syntax-highlighting.js",
      "js/code-validation.js",
      "js/terminal-manager.js",
      "js/ui-manager.js",
      "js/main.js"
    ],
    "settings": [
      {
        "key": "AUTO_SAVE_INTERVAL",
        "name": "Auto Save Interval (s)",
        "type": "number",
        "value": 30,
        "description": "Auto save content every N seconds (0 = disabled)"
      },
      {
        "key": "FONT_SIZE",
        "name": "Font Size",
        "type": "number",
        "value": 14,
        "description": "Text editor font size in pixels"
      },
      {
        "key": "TAB_SIZE",
        "name": "Tab Size",
        "type": "number",
        "value": 4,
        "description": "Number of spaces for tab indentation"
      },
      {
        "key": "TERMINAL_ENABLED",
        "name": "Integrated Terminal",
        "type": "boolean",
        "value": false,
        "description": "Show integrated terminal by default"
      }
    ]
  },
  "files": {
    "text_editor.app": "ew0KICAgICJpZCI6ICJ0ZXh0X2VkaXRvciIsDQogICAgIm5hbWUiOiAiVGV4dCBFZGl0b3IiLA0KICAgICJkZXNjcmlwdGlvbiI6ICJBIHNpbXBsZSB0ZXh0IGVkaXRvciBmb3IgY3JlYXRpbmcgYW5kIGVkaXRpbmcgdGV4dCBmaWxlcyBpbiB0aGUgdmlydHVhbCBmaWxlIHN5c3RlbSIsDQogICAgImljb24iOiAiZmFzIGZhLWVkaXQiLA0KICAgICJrZXl3b3JkcyI6IFsidGV4dCIsICJlZGl0b3IiLCAiZmlsZSIsICJlZGl0IiwgIndyaXRlIl0sDQogICAgImF1dGhvciI6ICJTeXBuZXggT1MiLA0KICAgICJ2ZXJzaW9uIjogIjEuMC4yIiwNCiAgICAidHlwZSI6ICJ1c2VyX2FwcCIsDQogICAgInNjcmlwdHMiOiBbDQogICAgICAgICJqcy91dGlscy5qcyIsDQogICAgICAgICJqcy9zZXR0aW5ncy1tYW5hZ2VyLmpzIiwNCiAgICAgICAgImpzL2ZpbGUtbWFuYWdlci5qcyIsDQogICAgICAgICJqcy9lZGl0b3ItbWFuYWdlci5qcyIsDQogICAgICAgICJqcy9zeW50YXgtaGlnaGxpZ2h0aW5nLmpzIiwNCiAgICAgICAgImpzL2NvZGUtdmFsaWRhdGlvbi5qcyIsIA0KICAgICAgICAianMvdGVybWluYWwtbWFuYWdlci5qcyIsDQogICAgICAgICJqcy91aS1tYW5hZ2VyLmpzIiwNCiAgICAgICAgImpzL21haW4uanMiDQogICAgXSwNCiAgICAic2V0dGluZ3MiOiBbDQogICAgICAgIHsNCiAgICAgICAgICAgICJrZXkiOiAiQVVUT19TQVZFX0lOVEVSVkFMIiwNCiAgICAgICAgICAgICJuYW1lIjogIkF1dG8gU2F2ZSBJbnRlcnZhbCAocykiLA0KICAgICAgICAgICAgInR5cGUiOiAibnVtYmVyIiwNCiAgICAgICAgICAgICJ2YWx1ZSI6IDMwLA0KICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkF1dG8gc2F2ZSBjb250ZW50IGV2ZXJ5IE4gc2Vjb25kcyAoMCA9IGRpc2FibGVkKSINCiAgICAgICAgfSwNCiAgICAgICAgew0KICAgICAgICAgICAgImtleSI6ICJGT05UX1NJWkUiLA0KICAgICAgICAgICAgIm5hbWUiOiAiRm9udCBTaXplIiwNCiAgICAgICAgICAgICJ0eXBlIjogIm51bWJlciIsDQogICAgICAgICAgICAidmFsdWUiOiAxNCwNCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUZXh0IGVkaXRvciBmb250IHNpemUgaW4gcGl4ZWxzIg0KICAgICAgICB9LA0KICAgICAgICB7DQogICAgICAgICAgICAia2V5IjogIlRBQl9TSVpFIiwNCiAgICAgICAgICAgICJuYW1lIjogIlRhYiBTaXplIiwNCiAgICAgICAgICAgICJ0eXBlIjogIm51bWJlciIsDQogICAgICAgICAgICAidmFsdWUiOiA0LA0KICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIk51bWJlciBvZiBzcGFjZXMgZm9yIHRhYiBpbmRlbnRhdGlvbiINCiAgICAgICAgfSwNCiAgICAgICAgew0KICAgICAgICAgICAgImtleSI6ICJURVJNSU5BTF9FTkFCTEVEIiwNCiAgICAgICAgICAgICJuYW1lIjogIkludGVncmF0ZWQgVGVybWluYWwiLA0KICAgICAgICAgICAgInR5cGUiOiAiYm9vbGVhbiIsDQogICAgICAgICAgICAidmFsdWUiOiBmYWxzZSwNCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJTaG93IGludGVncmF0ZWQgdGVybWluYWwgYnkgZGVmYXVsdCINCiAgICAgICAgfQ0KICAgIF0NCn0g",
    "text_editor.html": ""
  },
  "package_info": {
    "format_version": "1.0",
    "created_at": "2025-07-20T05:23:46.818683",
    "packaged_by": "Sypnex OS App Packager",
    "source_directory": "user_apps_dev\\text_editor"
  }
}