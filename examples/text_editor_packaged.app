{
  "app_metadata": {
    "id": "text_editor",
    "name": "Text Editor",
    "description": "A simple text editor for creating and editing text files in the virtual file system",
    "icon": "fas fa-edit",
    "keywords": [
      "text",
      "editor",
      "file",
      "edit",
      "write"
    ],
    "author": "Sypnex OS",
    "version": "1.0.0",
    "type": "user_app",
    "scripts": [
      "main.js"
    ],
    "settings": [
      {
        "key": "AUTO_SAVE_INTERVAL",
        "name": "Auto Save Interval (s)",
        "type": "number",
        "value": 30,
        "description": "Auto save content every N seconds (0 = disabled)"
      },
      {
        "key": "FONT_SIZE",
        "name": "Font Size",
        "type": "number",
        "value": 14,
        "description": "Text editor font size in pixels"
      },
      {
        "key": "TAB_SIZE",
        "name": "Tab Size",
        "type": "number",
        "value": 4,
        "description": "Number of spaces for tab indentation"
      },
      {
        "key": "TERMINAL_ENABLED",
        "name": "Integrated Terminal",
        "type": "boolean",
        "value": false,
        "description": "Show integrated terminal by default"
      }
    ]
  },
  "files": {
    "text_editor.app": "ew0KICAgICJpZCI6ICJ0ZXh0X2VkaXRvciIsDQogICAgIm5hbWUiOiAiVGV4dCBFZGl0b3IiLA0KICAgICJkZXNjcmlwdGlvbiI6ICJBIHNpbXBsZSB0ZXh0IGVkaXRvciBmb3IgY3JlYXRpbmcgYW5kIGVkaXRpbmcgdGV4dCBmaWxlcyBpbiB0aGUgdmlydHVhbCBmaWxlIHN5c3RlbSIsDQogICAgImljb24iOiAiZmFzIGZhLWVkaXQiLA0KICAgICJrZXl3b3JkcyI6IFsidGV4dCIsICJlZGl0b3IiLCAiZmlsZSIsICJlZGl0IiwgIndyaXRlIl0sDQogICAgImF1dGhvciI6ICJTeXBuZXggT1MiLA0KICAgICJ2ZXJzaW9uIjogIjEuMC4wIiwNCiAgICAidHlwZSI6ICJ1c2VyX2FwcCIsDQogICAgInNjcmlwdHMiOiBbDQogICAgICAgICJtYWluLmpzIg0KICAgIF0sDQogICAgInNldHRpbmdzIjogWw0KICAgICAgICB7DQogICAgICAgICAgICAia2V5IjogIkFVVE9fU0FWRV9JTlRFUlZBTCIsDQogICAgICAgICAgICAibmFtZSI6ICJBdXRvIFNhdmUgSW50ZXJ2YWwgKHMpIiwNCiAgICAgICAgICAgICJ0eXBlIjogIm51bWJlciIsDQogICAgICAgICAgICAidmFsdWUiOiAzMCwNCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJBdXRvIHNhdmUgY29udGVudCBldmVyeSBOIHNlY29uZHMgKDAgPSBkaXNhYmxlZCkiDQogICAgICAgIH0sDQogICAgICAgIHsNCiAgICAgICAgICAgICJrZXkiOiAiRk9OVF9TSVpFIiwNCiAgICAgICAgICAgICJuYW1lIjogIkZvbnQgU2l6ZSIsDQogICAgICAgICAgICAidHlwZSI6ICJudW1iZXIiLA0KICAgICAgICAgICAgInZhbHVlIjogMTQsDQogICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGV4dCBlZGl0b3IgZm9udCBzaXplIGluIHBpeGVscyINCiAgICAgICAgfSwNCiAgICAgICAgew0KICAgICAgICAgICAgImtleSI6ICJUQUJfU0laRSIsDQogICAgICAgICAgICAibmFtZSI6ICJUYWIgU2l6ZSIsDQogICAgICAgICAgICAidHlwZSI6ICJudW1iZXIiLA0KICAgICAgICAgICAgInZhbHVlIjogNCwNCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJOdW1iZXIgb2Ygc3BhY2VzIGZvciB0YWIgaW5kZW50YXRpb24iDQogICAgICAgIH0sDQogICAgICAgIHsNCiAgICAgICAgICAgICJrZXkiOiAiVEVSTUlOQUxfRU5BQkxFRCIsDQogICAgICAgICAgICAibmFtZSI6ICJJbnRlZ3JhdGVkIFRlcm1pbmFsIiwNCiAgICAgICAgICAgICJ0eXBlIjogImJvb2xlYW4iLA0KICAgICAgICAgICAgInZhbHVlIjogZmFsc2UsDQogICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiU2hvdyBpbnRlZ3JhdGVkIHRlcm1pbmFsIGJ5IGRlZmF1bHQiDQogICAgICAgIH0NCiAgICBdDQp9IA==",
    "text_editor.html": ""
  },
  "package_info": {
    "format_version": "1.0",
    "created_at": "2025-07-19T20:52:12.972043",
    "packaged_by": "Sypnex OS App Packager",
    "source_directory": "user_apps_dev\\text_editor"
  }
}